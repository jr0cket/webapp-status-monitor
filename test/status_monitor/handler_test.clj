(ns status-monitor.handler-test
  ^{:author "John Stevenson"
    :doc "Testing using clojure.test library.

         Unit testing in Clojure is focused on testing individual
         functions.  The clojure.test function provides the is
         macro that is comparable to assert in other test libraries.

         In general, the values compared in an assertion can be written
         either way around.  For best results in CIDER testing, the
         expected value should be first.

         The testing macro defines context for one or more assertions
         in a string describing the purpose of those assertions.

         The deftest macro contains test contexts and assertions,
         grouping the tests for a particular public function."}

  (:require [clojure.test :refer :all]
            [ring.mock.request :as mock]
            [status-monitor.handler :refer :all]))

(deftest test-app
  (testing "main route"
    (let [response (app (mock/request :get "/"))]
      (is (= (:status response) 200))
      (is (= (:body response) "Hello World"))))

  (testing "not-found route"
    (let [response (app (mock/request :get "/invalid"))]
      (is (= (:status response) 404)))))


(deftest test-components
  (testing "UI data generated by the dashboard components in Hiccup format"
    (let [component-50-per-cent
          [:svg
           {:view-box "0 0 100 20"
            :width    202
            :height   22}
           [:rect
            {:x      1
             :y      1
             :width  50
             :height 20
             :rx     5
             :ry     5
             :stroke "black"
             :fill   "orange"}]]]
      (is (= (component-status-bar 50)
             component-50-per-cent)))))
